<div class="markdown-body"><ul>
	<li>
		<a href="#help_internal_doc_wm.header_1">1. 概述
		</a>
		<ul>
			<li>
				<a href="#help_internal_doc_wm.header_1_1">1.1. Event
				</a>
			</li>
			<li>
				<a href="#help_internal_doc_wm.header_1_2">1.2. Plugin
				</a>
			</li>
			<li>
				<a href="#help_internal_doc_wm.header_1_3">1.3. ui库
				</a>
			</li>
		</ul>
	</li>
	<li>
		<a href="#help_internal_doc_wm.header_2">2. ui库
		</a>
		<ul>
			<li>
				<a href="#help_internal_doc_wm.header_2_1">2.1. ui.evt库
				</a>
			</li>
			<li>
				<a href="#help_internal_doc_wm.header_2_2">2.2. ui.res库
				</a>
			</li>
			<li>
				<a href="#help_internal_doc_wm.header_2_3">2.3. ui.window库
				</a>
			</li>
			<li>
				<a href="#help_internal_doc_wm.header_2_4">2.4. WndProperty的属性及方法
				</a>
			</li>
			<li>
				<a href="#help_internal_doc_wm.header_2_5">2.5. KMaker窗口控件布局生成器的属性及方法
				</a>
			</li>
			<li>
				<a href="#help_internal_doc_wm.header_2_6">2.6. WndModel窗口对象属性及方法
				</a>
			</li>
			<li>
				<a href="#help_internal_doc_wm.header_2_7">2.7. 示例代码
				</a>
			</li>
		</ul>
	</li>
	<li>
		<a href="#help_internal_doc_wm.header_3">3. 技巧及进阶
		</a>
		<ul>
			<li>
				<a href="#help_internal_doc_wm.header_3_1">3.1. props
				</a>
			</li>
			<li>
				<a href="#help_internal_doc_wm.header_3_2">3.2. toolbox
				</a>
			</li>
			<li>
				<a href="#help_internal_doc_wm.header_3_3">3.3. smartdata
				</a>
			</li>
			<li>
				<a href="#help_internal_doc_wm.header_3_4">3.4. wizard
				</a>
			</li>
		</ul>
	</li></ul><a name="help_internal_doc_wm.header_1">
	<h1>1. 概述
	</h1></a><p>窗口管理器，是一个通用的多文档编辑器管理器，类似MVC框架。抽像出Event和Plugin的概念，对不同的功能进行组织，并映射到ewsl的ui库。</p><a name="help_internal_doc_wm.header_1_1">
	<h2>1.1. Event
	</h2></a><p>窗口管理器，抽像出Event的概念，Event大概可分为以下几大类：
	<ul>
		<li>EvtCommand 一般用于关联按扭、菜单或工具条等，在控件触发时，要触发这个关联的Event。
		</li>
		<li>EvtProxy 一般用于关联用户可编辑控件，用于控件的状态的交互，
		</li>
	</ul> 最其中的交互是transfer_data，可以通过EvtProxy把值传送到控件，也可以从控件传送到EvtProxy。
	<ul>
		<li>EvtGroup 组，用于代表一组Event，可以用EvtGroup来生成菜单和工具条等。
		</li>
		<li>EvtOptionData，下拉框等控件选项定义。
		</li>
		<li>WndModel 窗口对象。
		</li>
		<li>Plugin 插件对象。
		</li>
	</ul><br />跟Event关联的内容，有EvtListener和Validator。 EvtListener用于监听Event，Validator用于绑定到控件，负责具体的控件和Event之间的交互。在脚本中，一般不需要直接使用到这两方面的内容，而是通过Event间接与控件进行交互。如果想要控件的状态变化时触动某个动作，可以往名称为<code>sync_handler</code>的Event中注册触发函数。</p><p>例子：在<code>time.policy</code>改变时，修改<code>time.dt_reference</code>控件的状态</p><pre><code code-language="ewsl">	<br />	local ec=...; // ec为WndModel关联的evtmgr，构造方式要看具体环境<br />	local fn1=function(e)<br />	{		<br />		local v=ec["time.policy"].value;<br />		ec["time.dt_reference"].set("FLAG_ENABLE",v==1);<br />	};	<br />	ec["sync_handler"].add(fn1,"time.policy");<br />	</code></pre><a name="help_internal_doc_wm.header_1_2">
	<h2>1.2. Plugin
	</h2></a>Plugin是一种特殊的Event。窗口管理器，按功能进行划分，抽象为不同的Plugin来实现。不同的Plugin，可以动态注册到窗口管理器中，注册后即可以使用Plugin的功能。比如，有菜单管理器Plugin，有工具条管理器Plugin，有历史打开文件Plugin等。只要是功能独立，即使功能很小，一般也建议抽象成Plugin来实现。在Plugin系统的基础上，我们抽象出编辑器Plugin，编辑器认为是在主Canvas中打开文件并处理的Plugin。<p>编辑器Plugin，目前包括：
	<ul>
		<li>ewsl后处理交互编辑器
		</li>
		<li>peditor模型文档编辑器
		</li>
		<li>fieldviewer实时场观察器
		</li>
		<li>texteditor文本文件编辑器
		</li>
		<li>html浏览器
		</li>
	</ul></p><a name="help_internal_doc_wm.header_1_3">
	<h2>1.3. ui库
	</h2></a>ui库，把窗口管理器中各方面的内容，基于ewsl扩展出相应的脚本接口，达到使用ewsl来定义界面相关的对象及交互的目的，降低维护扩展的难度。<p>ui库内容：
	<div class="markdown-block">
		<table width="100%">
			<tr style="border:0px">
				<td style="border:0px">
					<div class="markdown-table">
						<table width="100%" class="markdown-table" style="border:1px">
							<thead>
								<tr>
									<td align="center"> 名称 
									</td>
									<td align="center"> 作用 
									</td>
								</tr>
							</thead>
							<tbody>
								<tr>
									<td align="center"> ui.evt 
									</td>
									<td align="center"> Event库 
									</td>
								</tr>
								<tr>
									<td align="center"> ui.res 
									</td>
									<td align="center"> 界面资源库 
									</td>
								</tr>
								<tr>
									<td align="center"> ui.window 
									</td>
									<td align="center"> 窗口库 
									</td>
								</tr>
							</tbody>
						</table>
					</div>
				</td>
			</tr>
		</table>
	</div></p><p>ui库相关对象
	<div class="markdown-block">
		<table width="100%">
			<tr style="border:0px">
				<td style="border:0px">
					<div class="markdown-table">
						<table width="100%" class="markdown-table" style="border:1px">
							<thead>
								<tr>
									<td align="center"> 名称 
									</td>
									<td align="center"> 作用 
									</td>
								</tr>
							</thead>
							<tbody>
								<tr>
									<td align="center"> WndModel 
									</td>
									<td align="center"> 窗口对象<br />

									</td>
								</tr>
								<tr>
									<td align="center"> KMaker 
									</td>
									<td align="center"> 窗口控件布局生成器 
									</td>
								</tr>
								<tr>
									<td align="center"> EvtManager 
									</td>
									<td align="center"> Event管理器 
									</td>
								</tr>
								<tr>
									<td align="center"> WndProperty 
									</td>
									<td align="center"> 窗口属性对象 
									</td>
								</tr>
								<tr>
									<td align="center"> DToolBox 
									</td>
									<td align="center"> toolbox对象 
									</td>
								</tr>
							</tbody>
						</table>
					</div>
				</td>
			</tr>
		</table>
	</div></p><a name="help_internal_doc_wm.header_2">
	<h1>2. ui库
	</h1></a><a name="help_internal_doc_wm.header_2_1">
	<h2>2.1. ui.evt库
	</h2></a>每个WndModel，都有一个自己的evtmgr，ui.evt是全局的Event管理器。使用evtmgr时，可以通过Event的id来引用预定义的Event，比如<code>ui.evt["Open"]</code>或<code>model.evtmgr["event_id"]</code>。窗口管理器，内置了很多Event，另外，用户也可以使用外置脚本来定义自己的Event，或是修改已经定义好的Event。比如文件菜单，对应的Event为"File"，类型为EvtGroup，可以通过修改"File"这个Event来修改"File"菜单。具体可参考 ui/scripting/evt_manger.ewsl。另外，也可以修改功能对应的快捷键等内容，修改后一般立即生效。<p>通过ewsl来定义Event(下面假设ec为对应的evtmgr)
	<ul>
		<li><code>ec.wm_var</code> 定义EvtProxy<br />

		</li>
		<li><code>ec.wm_cmd</code> 定义EvtCommand<br />

		</li>
		<li><code>ec.gp_beg/ec.gp_end</code> 定义EvtGroup或EvtOptionData等
		</li>
		<li><code>ec.gp_new</code> 跟 <code>ec.gp_beg</code> 功能类似，但会先清空原有的内容
		</li>
	</ul></p><p>定义EvtProxy时，数据会关联到evtmgr的数据集中
	<ul>
		<li>evtmgr.get_data 获取关联的数据集
		</li>
		<li>evtmgr.set_data 设置关联的数据集（必须是table）
		</li>
		<li>默认会关联到model.data
		</li>
	</ul></p><pre><code code-language="ewsl">local evtmgr=ui.evt;<br />local data=table();<br />local olddata=evtmgr.set_data(data);<br />evtmgr.wm_var("var.x","x","1");<br />evtmgr.set_data(olddata);<br /><br />data.x="...";<br />// model.transfer_data(+1); 可以把data.x传送到var.x关联的控件<br /></code></pre><p>通过ewsl，也可以直接调用这些Event，比如要通过ewsl来触发打开这个动作，这个动作对应的Event的id为"Open"，可以 <code>ui.evt["Open"].cmd_execute()</code>这样来触发。</p><p>一般较具体的功能，在窗口管理器中，也可能是由某个预定义的事件来提供。比如通用的对话框
	<ul>
		<li>Dialog.Msgs 弹出简单的消息窗口的功能
		</li>
		<li>Dialog.File 弹出文件对话框
		</li>
		<li>Dialog.Text 弹出文本对话框
		</li>
	</ul></p><pre><code code-language="ewsl">local ec=...;<br /><br />//定义一个EvtGroup<br />ec.gp_new("tb.Search");<br />	ec.gp_add("Find");<br />	ec.gp_add("Replace");<br />ec.gp_end();<br /><br />//定义EvtProxy<br />ec.wm_var("workmode.id","id",0); // 定义名称为`workmode.id`的EvtProxy，初始值为0，短名称为id，可以使用model.data.id访问。<br />ec.wm_var("workmode.figure","figure"); // 定义名称为```workmode.figure```的EvtProxy，初始值为nil，短名称为figure。<br /><br />// 定义一个EvtCommand<br />ec.wm_cmd("my_button").do_cmd_execute=function(param,model,evtmgr)<br />{<br />	// model和evtmgr是创建这个Event时关联的WndModel和EvtManager<br />	// param.model是触发这个事件时对应的WndModel<br />	<br />	model.transfer_data(-1);<br />	ui.evt["Dialog.Msgs"].std_execute(<br />		table{<br />			title: "message"<br />			content: "workmode.id is "..model.data.id;	<br />		}<br />	);<br />	local f=create_figure(model.data.id);<br />	model.data.figure=f;<br />	<br />	model.transfer_data(+1);	<br />};<br /><br /></code></pre><a name="help_internal_doc_wm.header_2_2">
	<h2>2.2. ui.res库
	</h2></a><p>用来定义和加载资源文件，比如图像等。工具图标等，都是通过这个库来定义，系统会直接使用同名称的图标资源，对于没定义图标的情况，将使用默认图标。同一个名称的资源，可以包括多个不同大小的图像资源，在需要使用图像资源时，优先选择同样大小的图像，如果没有，则自动使用较大的图像进行缩放生成，如果没有较大的，就使用小的进行放大，完全没有就使用默认图标。<br />
具体用法比较简单，可以参考系统默认的资源配置脚本。注意，这是配置脚本，可以利用脚本再加一些特殊的约定，动态加载资源。<br />
系统默认的资源配置脚本：<code>app:/scripting/ui/res_manager.ewsl</code>，可以修改这个文件来定制图标等。</p><a name="help_internal_doc_wm.header_2_3">
	<h2>2.3. ui.window库
	</h2></a>这个库，目前只定义了一个函数，用来创建WndModel对象。<div class="markdown-block">
	<table width="100%">
		<tr style="border:0px">
			<td style="border:0px">
				<div class="markdown-table">
					<table width="100%" class="markdown-table" style="border:1px">
						<thead>
							<tr>
								<td align="center"> 名称 
								</td>
								<td align="center"> 作用 
								</td>
							</tr>
						</thead>
						<tbody>
							<tr>
								<td align="center"> ui.window.create 
								</td>
								<td align="center"> 创建窗口对象 
								</td>
							</tr>
						</tbody>
					</table>
				</div>
			</td>
		</tr>
	</table></div>ui.window.create函数，参数可以是窗口的创建函数，table、toolbox或文件名。当参数是table或toolbox时，必须定义入口函数wnd_create。<br /><br /><a name="help_internal_doc_wm.header_2_4">
	<h2>2.4. WndProperty的属性及方法
	</h2></a><div class="markdown-block">
	<table width="100%">
		<tr style="border:0px">
			<td style="border:0px">
				<div class="markdown-table">
					<table width="100%" class="markdown-table" style="border:1px">
						<thead>
							<tr>
								<td align="center"> 名称 
								</td>
								<td align="center"> 作用 
								</td>
							</tr>
						</thead>
						<tbody>
							<tr>
								<td align="center"> sv 
								</td>
								<td align="center"> 保存窗口属性对象 
								</td>
							</tr>
							<tr>
								<td align="center"> name 
								</td>
								<td align="center"> 关联的Event名称 
								</td>
							</tr>
							<tr>
								<td align="center"> label 
								</td>
								<td align="center"> 标签 
								</td>
							</tr>
							<tr>
								<td align="center"> flags 
								</td>
								<td align="center"> 状态标识 
								</td>
							</tr>
							<tr>
								<td align="center"> nvalue 
								</td>
								<td align="center"> 值(整数) 
								</td>
							</tr>
							<tr>
								<td align="center"> svalue 
								</td>
								<td align="center"> 值（字符串）
								</td>
							</tr>
							<tr>
								<td align="center"> align 
								</td>
								<td align="center"> 水平对齐 
								</td>
							</tr>
							<tr>
								<td align="center"> valign 
								</td>
								<td align="center"> 垂直对齐 
								</td>
							</tr>
							<tr>
								<td align="center"> hint 
								</td>
								<td align="center"> 提示信息 
								</td>
							</tr>
						</tbody>
					</table>
				</div>
			</td>
		</tr>
	</table></div><p>另外：其他还有很多属性，不同的窗口定义，需要不同的专有属性，通用属性，在不同类型的窗口定义中，也可能有不同的意义，具体见窗口类型的说明表。</p><a name="help_internal_doc_wm.header_2_5">
	<h2>2.5. KMaker窗口控件布局生成器的属性及方法
	</h2></a><div class="markdown-block">
	<table width="100%">
		<tr style="border:0px">
			<td style="border:0px">
				<div class="markdown-table">
					<table width="100%" class="markdown-table" style="border:1px">
						<thead>
							<tr>
								<td align="center"> 名称 
								</td>
								<td align="center"> 作用 
								</td>
							</tr>
						</thead>
						<tbody>
							<tr>
								<td align="center"> ld 
								</td>
								<td align="center"> 载入窗口属性对象 
								</td>
							</tr>
							<tr>
								<td align="center"> win 
								</td>
								<td align="center"> 定义生成窗口 
								</td>
							</tr>
							<tr>
								<td align="center"> end 
								</td>
								<td align="center"> 完成窗口定义 
								</td>
							</tr>
							<tr>
								<td align="center"> add 
								</td>
								<td align="center"> 添加窗口，相当于win(...).end() 
								</td>
							</tr>
							<tr>
								<td align="center"> row 
								</td>
								<td align="center"> 相当于 win("row",...) 
								</td>
							</tr>
							<tr>
								<td align="center"> col 
								</td>
								<td align="center"> 相当于 win("col",...) 
								</td>
							</tr>
							<tr>
								<td align="center"> add_item 
								</td>
								<td align="center"> 添加预定义内容 
								</td>
							</tr>
						</tbody>
					</table>
				</div>
			</td>
		</tr>
	</table></div>其中，win/end两个接口，必须匹配。如果end函数可以带一个字符串作为参数，这情况下，表示前面的内容为预定义内容，后面可以使用add_item来添加预定内容。另外，KMaker窗口生成器，继承了所有的窗口对象的属性和方法。<a name="help_internal_doc_wm.header_2_6">
	<h2>2.6. WndModel窗口对象属性及方法
	</h2></a><p>
	<div class="markdown-block">
		<table width="100%">
			<tr style="border:0px">
				<td style="border:0px">
					<div class="markdown-table">
						<table width="100%" class="markdown-table" style="border:1px">
							<thead>
								<tr>
									<td align="center"> 名称 
									</td>
									<td align="center"> 作用 
									</td>
								</tr>
							</thead>
							<tbody>
								<tr>
									<td align="center"> maker 
									</td>
									<td align="center"> 关联的KMaker对象 
									</td>
								</tr>
								<tr>
									<td align="center"> evtmgr 
									</td>
									<td align="center"> 局部Event表 
									</td>
								</tr>
								<tr>
									<td align="center"> context 
									</td>
									<td align="center"> 用户数据 
									</td>
								</tr>
								<tr>
									<td align="center"> data 
									</td>
									<td align="center"> 默认关联的数据集 
									</td>
								</tr>
								<tr>
									<td align="center"> transfer_data 
									</td>
									<td align="center"> 数据传输函数 
									</td>
								</tr>
								<tr>
									<td align="center"> show 
									</td>
									<td align="center"> 显示窗口（非模式对话框）
									</td>
								</tr>
								<tr>
									<td align="center"> show_modal 
									</td>
									<td align="center"> 显示窗口（模式对话框） 
									</td>
								</tr>
								<tr>
									<td align="center"> end_modal 
									</td>
									<td align="center"> 结束模式对话框 
									</td>
								</tr>
								<tr>
									<td align="center"> close 
									</td>
									<td align="center"> 关闭窗口 
									</td>
								</tr>
							</tbody>
						</table>
					</div>
				</td>
			</tr>
		</table>
	</div></p><a name="help_internal_doc_wm.header_2_7">
	<h2>2.7. 示例代码
	</h2></a>表达式解释器的窗口代码<pre><code code-language="ewsl"><br />local t=table();<br />t.wnd_create=function(ctx)<br />{<br />	local km=ctx.maker;<br /><br />	km.ld(0).width(280).sv(1);<br />	km.ld(0).width( 96).sv(2);<br /><br />	km.win("dialog"		,km.label(_hT("expr")).flags(km.IWND_NO_RESIZABLE|km.IWND_NO_CLOSE|km.IWND_AUTO_FIT).sprops("icon","Find"));<br />		km.win("col");<br />			km.win("row");<br />				km.add("textctrl"	,km.ld(1).name("expr.expression").height(120).flags(km.IWND_MULTILINE).hint(_hT("expression")));<br />				km.add("textctrl"	,km.ld(1).name("expr.result").flags(km.IWND_READONLY).hint(_hT("result")));<br />			km.end();<br />		<br />			km.win("row");<br />				km.add("button"		,km.ld(2).name(_kT("Ok#button")));<br />				km.add("button"		,km.ld(2).name(_kT("Cancel#button")));<br />			km.end();<br />		km.end();<br />	km.end();<br />};<br />return t;<br /></code></pre>搜索窗口的ewsl代码<pre><code code-language="ewsl"><br />local t=table();<br />t.wnd_create=function(ctx)<br />{<br />	local km=ctx.maker;<br />	km.width(280).sv(1);<br />	km.width( 96).sv(2);<br /><br />	km.win("col"		,km.ld(0).label(_hT("search_flags")).flags(km.IWND_EXPAND));<br />		km.add("checkbox"	,km.ld(0).name("search.case").label(_hT("match case")));<br />		km.add("checkbox"	,km.ld(0).name("search.word").label(_hT("match word")));<br />		km.add("checkbox"	,km.ld(0).name("search.regexp").label(_hT("regexp")));<br />		//km.add("checkbox"	,km.ld(0).name("search.posix").label(_hT("posix")));<br />	km.end("flags");<br />	<br />	km.win("dialog"		,km.label(_hT("find and replace")).flags(km.IWND_NO_RESIZABLE|km.IWND_NO_CLOSE|km.IWND_AUTO_FIT).sprops("icon","Find"));<br />		km.win("col");<br />			km.win("row");<br />				km.add("textctrl"	,km.ld(1).name("search.text_old").hint(_hT("find what?")));<br />				km.add("textctrl"	,km.ld(1).name("search.text_new").hint(_hT("replace with?")));<br />				km.add_item("flags");<br />			km.end();<br />			km.win("row");<br />				km.add("button"		,km.ld(2).name("Find#button"));<br />				km.add("button"		,km.ld(2).name("Replace#button"));<br />				km.add("button"		,km.ld(2).name("ReplaceAll#button"));<br />			km.end();<br />		km.end();<br />	km.end();<br />};<br /><br />return t;<br /><br /></code></pre>例子：动态创建窗口，并立即弹出<pre><code code-language="ewsl"><br />ui.window.create(function(model)<br />{<br />	local ec=model.evtmgr;<br />	// 这里定义关联的Event<br />	<br />	local km=model.maker;<br />	km.win("dialog",...);<br />		// 这里定义窗口内容<br />	km.end();<br />}).show_modal();<br /><br /></code></pre><a name="help_internal_doc_wm.header_3">
	<h1>3. 技巧及进阶
	</h1></a>可以灵活应用所有的ewsl脚本技巧，来简化窗口的定义，避免重复的内容。目前已经定义出props库，来简化这个工作。<p>对于经常要使用的较类似的窗口布局和行为，可抽象成窗口模板，目前已经抽象出toolbox，并在toolbox的基础上扩展出了smartdata和wizard。可以根据具体的需要，在toolbox的基础上扩展出具体的窗口模板。现在来说，smartdata是参考旧框架的smartdata实现的，但是，smartdata可以有更多的形式，以后来说，应该定义出多种具有不同针对性的smartdata。</p><a name="help_internal_doc_wm.header_3_1">
	<h2>3.1. props
	</h2></a><p>在KMaker的基础上，扩展出一些较高级的接口，用来简化窗口的定义，并对风格进行整体控制。</p>例子：使用props库来定义Cube的界面<pre><code code-language="ewsl"><br />property.createpage=function(ctx)<br />{<br />	local km=props.bind(ctx);	<br />	<br />	km.new_page("center_width",0);<br />		km.vec3("center");<br />		km.vec3("width");<br />	km.end_page("page0");<br />	<br />	km.new_page("corner_corner",1);<br />		km.vec3("lo_corner");<br />		km.vec3("hi_corner");<br />	km.end_page("page1");<br />	<br />	km.new_page("corner_width",2);<br />		km.vec3("lo_corner");<br />		km.dataview("vector3_list");<br />	km.end_page("page2");<br />	<br />	km.new_book("book#cube");					<br />		km.add_item("page0");<br />		km.add_item("page1");	<br />		km.add_item("page2");			<br />	km.end_book("book0");	<br />	<br />	km.new_container();	<br />		km.combo_book("cube_type","book#cube");		<br />		km.add_item("book0");<br />	km.end_container();<br />};<br /></code></pre><a name="help_internal_doc_wm.header_3_2">
	<h2>3.2. toolbox
	</h2></a>toolbox，是一种轻量化的工具扩展，可认为是一个独立的功能模块，类似微信或支付宝的小程序。<br />
<ul>
	<li>可以完全使用脚本来定义界面及交互逻辑
	</li>
	<li>可以作为一个变量保存到变量表中，也可保存到文件中
	</li>
	<li>定义时不需要界面
	</li>
	<li>在界面上可以打开，打开后可以根据设定的逻辑进行交互操作
	</li>
	<li>工具箱的交互操作中，可以动态调用绘图库绘图并展现在界面中，甚至可以构造另一个工具箱并打开
	</li></ul>一个toolbox对象，可能关键到特定类型的窗口控件，也可以通过<code>ui.window.create_by_toolbox</code>函数来创建WndModel对象。在交互式后处理窗口中，可以通过触发。toolbox的入口函数为成员函数<code>wnd_create</code>，默认实现：<pre><code code-language="ewsl">// toolbox的内部数据为context<br />context.wnd_create=function(model)<br />{<br />	this.evt_init(model);<br />	this.dlg_init(model);<br />};</code></pre><p>这个实现中，抽象出了<code>evt_init</code>函数和<code>dlg_init</code>函数。
	<ul>
		<li><code>evt_init</code>函数用于构造这个toolbox用到的Event。
		</li>
		<li><code>dlg_init</code>函数用于构造界面和布局。
		</li>
	</ul></p><a name="help_internal_doc_wm.header_3_3">
	<h2>3.3. smartdata
	</h2></a>smartdata是一种特殊的toolbox，继承所有toolbox的特点，所有的内容，通过外置脚本文件 app:/scripting/data/helper/smartdata.ewsl实现，定义了专有<code>evt_init</code>函数和<code>dlg_init</code>函数。<ul>
	<li>smartdata抽象出操作的概念，smartdata可认为是内部数据和多个操作的集合
	</li>
	<li>smartdata可以有多种实现形式，目前参考旧版的界面和逻辑实现了一种smartdata
	</li></ul>toolbox.smartdata示例<pre><code code-language="ewsl">#import toolbox;<br /><br />local tb=toolbox.new_smartdata();<br />tb.title="Smartdata#sample";<br /><br />local op;<br /><br />op=tb.add_operation("figure1");<br />op.add_param("x").type("string").value("0:100").unit("mm");<br />op.add_param("y").type("string").value("x*2").label("f(x)").unit("mm");<br />op.add_param("title").type("string").value("figure");<br />op.add_param("xlabel").type("string").value("x");<br />op.add_param("ylabel").type("string").value("y");<br />op.add_param("type").type("integer").value(0).optdata(["plot","polar"]);<br /><br /><br />op.do_execute=function(idata,pdata)<br />{<br /><br />	local x=eval2(pdata.x);<br />	local f=eval2("return function(x){"..pdata.y.."\nreturn temp;}");<br />	local y=eval2(<br />		"""<br />			#function(x,f)<br />			local y=zeros(x.length(),1);<br />			for(local i=0;i&lt;x.length();i++) y[i]=f(x[i]);<br />			return y;<br />		""",x,f);<br /><br />	local g=fig.new_figure();<br /><br />	if(pdata.type==0)<br />	{<br />		fig.plot(x,y);<br />	}<br />	else<br />	{<br />		fig.polar(x,y);<br />	}<br />	<br />	fig.title(pdata.title);<br />	fig.xlabel(pdata.xlabel);<br />	fig.ylabel(pdata.ylabel);	<br />	<br />	return g;<br />};<br /><br />op=tb.add_operation("figure2");<br />op.add_param("x").type("string").value("linspace(-1,1,100)");<br />op.add_param("y").type("string").value("linspace(-1,1,100)");<br />op.add_param("z").type("string").value("sin(x*3)*sin(y*5)").label("f(x,y)");<br /><br />op.do_execute=function(idata,pdata)<br />{<br />	local x=eval2(pdata.x);<br />	local y=eval2("#function(x)\n"..pdata.y,x);<br />	local f=eval2("return function(x,y){"..pdata.z.."\nreturn temp;}");<br />	local z=eval2(<br />		"""<br />			#function(x,y,f)<br />			local z=zeros(x.length(),y.length());<br />			for(local i=0;i&lt;x.length();i++)<br />				for(local j=0;j&lt;y.length();j++) z[i,j]=f(x[i],y[j]);<br />			return z;<br />		""",x,y,f);	<br />	local g=fig.new_figure();<br />	fig.imagesc(x,y,z);	<br />	return g;<br />};<br />return tb;<br /></code></pre><a name="help_internal_doc_wm.header_3_4">
	<h2>3.4. wizard
	</h2></a><p>wizard是一种特殊的toolbox，继承所有toolbox的特点，所有的内容，通过外置脚本文件 app:/scripting/data/helper/wizard.ewsl实现，定义了专有<code>evt_init</code>函数和<code>dlg_init</code>函数。</p><p> <code>evt_init</code>用于定义专有的Event，比如btn.prev和btn.next，用户需要定义自己的Event，使用<code>do_evt_init</code>函数来定义。向导完成时，会自动调用<code>on_done</code>函数。可重新定义这个函数，来实现专有的向导完成动作。</p><p>可以使用<code>new_page</code>来创建页面。page有以下函数和成员
	<ul>
		<li><code>page.evt_init</code>函数可以用来定义本页面的局部事件，一般不需要使用。
		</li>
		<li><code>page.dlg_init</code>函数用来定义本页面的界面。
		</li>
		<li><code>page.on_next</code>函数用来定义next的行为，
		</li>
	</ul> 返回nil代表向导结束了， 返回具体的page则会转到具体的page， 抛出异常则认为参数有问题，留在原页面。 <code>page.on_next</code>函数，默认行为为 <code>return this.next</code>
	<ul>
		<li><code>page.next</code>和<code>page.children</code>成员，均为nil代表这个页面是最终页，有非空则不是。
		</li>
	</ul> 默认实现下，<code>page.next</code>即为下一页。 当next为nil但children不为空时，这个函数必须重新定义， 根据用户选择的参数在children数组中选择下一页。另外，还有函数<code>add_page</code>，相当于创建一个page并添加到最后页。 </p>对于某一页面要根据用户的参数来选择下一页的情况，比如选择计算模式后，跳到不同的下一页，一般这样实现。<pre><code code-language="ewsl"><br />// define workmode1<br />// define workmode2<br />// define workmode3<br /><br />page.children=[workmode1,workmode2,workmode3];<br />page.on_next=function(){return children[model.data.workmode_id];}</code></pre>wizard示例1：toolbox.wizard<pre><code code-language="ewsl">#import toolbox;<br /><br />local tb=toolbox.new_wizard();<br /><br />tb.do_evt_init=function(model)<br />{<br />	local ec=model.evtmgr;<br />	ec.wm_var("myexpr.x","x","1");<br />	ec.wm_var("myexpr.y","y","1");<br />	ec.wm_var("myexpr.z","z","2");	<br />};<br /><br />local page1=tb.add_page("aa");<br />page1.dlg_init=function(model)<br />{<br />	local km=model.maker;	<br />	km.win("container",km.page(this.name).nvalue(this.index));<br />		km.win("row");			<br />			km.add("label",km.label("input x"));<br />			km.add("expression",km.name("myexpr.x"));			<br />		km.end();<br />	km.end();<br />};<br /><br />local page2=tb.add_page("bb");<br />page2.dlg_init=function(model)<br />{<br />	local km=model.maker;<br />	km.win("container",km.page(this.name).nvalue(this.index));<br />		km.win("row");			<br />			km.add("label",km.label("input y"));<br />			km.add("expression",km.name("myexpr.y"));<br />		km.end();<br />	km.end();<br />};<br /><br />page2.on_next=function(model)<br />{<br />	model.data.z=string(eval2("("..model.data.x..")+("..model.data.y..")"));<br />	return this.next;<br />};<br /><br />local page3=tb.add_page("cc");<br />page3.dlg_init=function(model)<br />{<br />	local km=model.maker;	<br />	km.win("container",km.page(this.name).nvalue(this.index));<br />		km.win("row");			<br />			km.add("label",km.label("calc x+y"));<br />			km.add("textctrl",km.name("myexpr.z"));<br />		km.end();<br />	km.end();<br />};<br /><br />tb.on_done=function(model)<br />{<br />	logger.log_message("wizard done");<br />	model.show(false);<br />	return true;<br />};<br /><br />return tb;<br /><br /><br /></code></pre><p>wizard示例2，根据用户的选择来决定下一页内容。</p><pre><code code-language="ewsl"><br />#import toolbox;<br /><br />local tb=toolbox.new_wizard();<br /><br />tb.do_evt_init=function(model)<br />{<br />	local ec=model.evtmgr;<br />	<br />	ec.gp_beg("workmode.type", "OptionData");<br />		ec.gp_add("workmode1", 0);<br />		ec.gp_add("workmdoe2", 1);<br />	ec.gp_end();<br />	ec.wm_var("workmode.id","id",0);<br /><br />};<br /><br />local endpage=tb.new_page("aa");<br />endpage.dlg_init=function(model)<br />{<br />	local km=model.maker;	<br />	km.win("container",km.page(this.name).nvalue(this.index));<br />		km.win("row");			<br />			km.add("label",km.label("this is endpage"));	<br />		km.end();<br />	km.end();<br />};<br /><br /><br />local workmode1=tb.new_page("aa");<br />workmode1.next=endpage;<br />workmode1.dlg_init=function(model)<br />{<br />	local km=model.maker;	<br />	km.win("container",km.page(this.name).nvalue(this.index));<br />		km.win("row");			<br />			km.add("label",km.label("this is workmode1"));	<br />		km.end();<br />	km.end();<br />};<br /><br /><br /><br />local workmode2=tb.new_page("bb");<br />workmode2.next=endpage;<br />workmode2.dlg_init=function(model)<br />{<br />	local km=model.maker;	<br />	km.win("container",km.page(this.name).nvalue(this.index));<br />		km.win("row");			<br />			km.add("label",km.label("this is workmode2"));	<br />		km.end();<br />	km.end();<br />};<br /><br /><br />local start_page=tb.new_page("bb");<br />start_page.children=[workmode1,workmode2];<br />start_page.dlg_init=function(model)<br />{<br />	local km=model.maker;<br />	km.win("container",km.page(this.name).nvalue(this.index));<br />		km.win("row");			<br />			km.add("combo"	,km.name("workmode.id").flags(km.IWND_READONLY|km.IWND_EXPAND).optdata("workmode.type"));<br />			<br />		km.end();<br />	km.end();<br />};<br />start_page.on_next=function(model)<br />{<br />	return this.children[model.data.id];<br />};<br /><br /><br />tb.fpage=start_page;<br /><br />tb.on_done=function(model)<br />{<br />	logger.log_message("wizard done");<br />	model.show(false);<br />	return true;<br />};<br /><br />return tb;<br /></code></pre></div>