<div class="markdown-body"><h1>正则表达式</h1>EastWave V7脚本语言提供了正则表达式（Regular Expression）工具库。<a name="help_script_Modules_Regex.concepts"> </a><h2>正则表达式基本概念</h2>正则表达式使用一个字符串来描述一个句法规则，基于该句法规则匹配目标文本中的内容字符串。使用正则表达式可以较为方便的从目标文本中匹配或者抓取到需要的内容。<br />
<p>正则表达式提供了一系列具有逻辑结构含义的“元字符”(meta-characters)，使用元字符和普通字符共同构成一个匹配规则。<br />
</p>正则表达式的符号包括：<div class="markdown-block">
	<table width="100%">
		<tr style="border:0px">
			<td align="center" style="border:0px">
				<a name="table-regex-symbols">table 1: 正则表达式元字符表
				</a>
			</td>
		</tr>
		<tr style="border:0px">
			<td style="border:0px">
				<div class="markdown-table">
					<table width="100%" class="markdown-table" style="border:1px">
						<thead>
							<tr>
								<td align="center"> 元字符<br />

								</td>
								<td align="center"> 说明<br />

								</td>
							</tr>
						</thead>
						<tbody>
							<tr>
								<td align="center"> <code>\</code><br />

								</td>
								<td align="left"> 转义字符<br />

								</td>
							</tr>
							<tr>
								<td align="center"> <code>^</code><br />

								</td>
								<td align="left"> 匹配输入字符串的开始位置<br />

								</td>
							</tr>
							<tr>
								<td align="center"> <code>$</code><br />

								</td>
								<td align="left"> 匹配输入字符串的结束位置<br />

								</td>
							</tr>
							<tr>
								<td align="center"> <code>*</code><br />

								</td>
								<td align="left"> 匹配前面的子表达式任意次数<br />

								</td>
							</tr>
							<tr>
								<td align="center"> <code>+</code><br />

								</td>
								<td align="left"> 匹配前面子表达式一次或多次<br />

								</td>
							</tr>
							<tr>
								<td rowspan="2" colspan="1" align="center"> <code>?</code><br />

								</td>
								<td align="left"> 匹配前面表达式零次或一次<br />

								</td>
							</tr>
							<tr>
								<td align="left">                  <code>?</code>前是元字符时，表示
									<a target="_top" href="#help_script_Modules_Regex.greedy_match">非贪婪模式
									</a>，即尽可能少的匹配，例如<code>"o+?"</code>匹配<code>"oooo"</code>时，会优先匹配单个<code>'o'</code>。<br />

								</td>
							</tr>
							<tr>
								<td align="center"> <code>{n}</code><br />

								</td>
								<td align="left"> <code>n</code>是一个正整数，精确匹配<code>n</code>次<br />

								</td>
							</tr>
							<tr>
								<td align="center"> <code>{n,m}</code><br />

								</td>
								<td align="left"> <code>n</code>和<code>m</code>都是正整数，且<code>n&lt;=m</code>，匹配次数大等于<code>n</code>小于等于<code>m</code><br />

								</td>
							</tr>
							<tr>
								<td align="center"> <code>.</code><br />

								</td>
								<td align="left"> 匹配除了换行符（<code>\r\n</code>）之外的任意字符<br />

								</td>
							</tr>
							<tr>
								<td align="center"> <code>[xyz]</code><br />

								</td>
								<td align="left"> 匹配字符集合(<code>xyz</code>)中的任意一个字符<br />

								</td>
							</tr>
							<tr>
								<td align="center"> <code>[^xyz]</code><br />

								</td>
								<td align="left"> 
									<a target="_top" href="#help_script_Modules_Regex.reversed_match">负匹配
									</a>字符集合(<code>xyz</code>)中的任意一个字符<br />

								</td>
							</tr>
							<tr>
								<td align="center"> <code>[a-z]</code><br />

								</td>
								<td align="left"> 匹配字符范围<code>a</code>到<code>z</code>之间的任意字符<br />

								</td>
							</tr>
							<tr>
								<td align="center"> <code>[^a-z]</code><br />

								</td>
								<td align="left"> 
									<a target="_top" href="#help_script_Modules_Regex.reversed_match">负匹配
									</a>字符范围<code>a</code>到<code>z</code>之间的任意字符<br />

								</td>
							</tr>
							<tr>
								<td align="center"> <code>(pattern)</code><br />

								</td>
								<td align="left"> <code>(...)</code>符号中间是一个子串模式。该子串模式将在
									<a target="_top" href="#help_script_Modules_Regex.match_object">匹配对象(Match Object
									</a>)中中被索引。<br />

								</td>
							</tr>
							<tr>
								<td align="center"> <code>(?:pattern)</code><br />

								</td>
								<td align="left"> <code>(?:...)</code>在<code>()</code>中以<code>?:</code>开头。该子串模式不会在
									<a target="_top" href="#help_script_Modules_Regex.match_object">匹配对象(Match Object
									</a>)中被索引。<br />

								</td>
							</tr>
							<tr>
								<td align="center"> <code>\b</code><br />

								</td>
								<td align="left"> 
									<a target="_top" href="#help_script_Modules_Regex.boundary_match">匹配单词的边界
									</a><br />

								</td>
							</tr>
							<tr>
								<td align="center"> <code>\B</code><br />

								</td>
								<td align="left"> 负
									<a target="_top" href="#help_script_Modules_Regex.boundary_match">匹配单词的边界
									</a><br />

								</td>
							</tr>
							<tr>
								<td align="center"> <code>\cx</code><br />

								</td>
								<td align="left"> 控制符匹配，<code>x</code>指明具体的控制符。例如：<code>\cM</code>表示一个回车符（<code>Ctrl-M</code>），<code>x</code>要求是26个英文字母（大小写均可）。<br />

								</td>
							</tr>
							<tr>
								<td align="center"> <code>\d</code><br />

								</td>
								<td align="left"> 匹配一个数字字符，等同于<code>[0-9]</code>。<br />

								</td>
							</tr>
							<tr>
								<td align="center"> <code>\D</code><br />

								</td>
								<td align="left"> 负匹配一个数字字符，等同于<code>[^0-9]</code>。<br />

								</td>
							</tr>
							<tr>
								<td align="center"> <code>\f</code><br />

								</td>
								<td align="left"> 匹配换页符。<br />

								</td>
							</tr>
							<tr>
								<td align="center"> <code>\n</code><br />

								</td>
								<td align="left"> 匹配换行符。<br />

								</td>
							</tr>
							<tr>
								<td align="center"> <code>\r</code><br />

								</td>
								<td align="left"> 匹配回车符。<br />

								</td>
							</tr>
							<tr>
								<td align="center"> <code>\t</code><br />

								</td>
								<td align="left"> 匹配制表符。<br />

								</td>
							</tr>
							<tr>
								<td align="center"> <code>\v</code><br />

								</td>
								<td align="left"> 匹配垂直制表符。<br />

								</td>
							</tr>
							<tr>
								<td align="center"> <code>\s</code><br />

								</td>
								<td align="left"> 匹配任何不可见字符，等价于<code>[ \f\n\r\t\v]</code>（注意空格）。<br />

								</td>
							</tr>
							<tr>
								<td align="center"> <code>\S</code><br />

								</td>
								<td align="left"> 负匹配任何不可见字符，等价于<code>[^ \f\n\r\t\v]</code>（注意空格）。<br />

								</td>
							</tr>
							<tr>
								<td align="center"> <code>\w</code><br />

								</td>
								<td align="left"> 匹配任何单词，单词可用字符在Unicode范围内理解。<br />

								</td>
							</tr>
							<tr>
								<td align="center"> <code>\W</code><br />

								</td>
								<td align="left"> 负匹配任何单词，单词可用字符在Unicode范围内理解。<br />

								</td>
							</tr>
							<tr>
								<td align="center"> <code>\xn</code><br />

								</td>
								<td align="left"> 匹配<code>n</code>，其中<code>n</code>为十六进制转义值。例如：<code>\x41</code>匹配<code>"A"</code>。<br />

								</td>
							</tr>
							<tr>
								<td align="center"> <code>\un</code><br />

								</td>
								<td align="left"> 匹配<code>n</code>，其中<code>n</code>为Unicode字符的编码，例如：<code>\u00A9</code>表示:<code>©</code><br />

								</td>
							</tr>
							<tr>
								<td align="center"> <code>\k</code><br />

								</td>
								<td align="left"> 
									<a target="_top" href="#help_script_Modules_Regex.reverse_reference">反向引用
									</a>前面某个被索引的子串模式的匹配结果<br />

								</td>
							</tr>
							<tr>
								<td align="center"> <code> `pre`  </code><br />

								</td>
								<td align="left"> 引用预定义名为<code>pre</code>的匹配子串（
									<a target="_top" href="#help_script_Modules_Regex.named_substring_reference">具名子串
									</a>）<br />

								</td>
							</tr>
							<tr>
								<td align="center"> <code>${k.m}</code><br />

								</td>
								<td align="left"> 引用同一级别的第<code>k</code>个子串（从<code>1</code>开始索引），<code>.m</code>表示第<code>m</code>次匹配。参考
									<a target="_top" href="#help_script_Modules_Regex.substring_reference">子串引用
									</a>，一般用于替换<br />

								</td>
							</tr>
						</tbody>
					</table>
				</div>
			</td>
		</tr>
	</table></div><strong>说明：</strong><a name="help_script_Modules_Regex.reversed_match"> </a><ul>
	<li>负匹配：表示对后面的匹配规则取逻辑非，即将原匹配规则匹配的字符串认为是不匹配，而原匹配规则不匹配的认为是匹配。
	</li></ul><a name="help_script_Modules_Regex.boundary_match"> </a><ul>
	<li>边界匹配：表示这个匹配位置恰好是一个单词的边界（首部或者尾部，而非中间），例如<code>"ion\b"</code>可以匹配<code>"lion"</code>但是不可以匹配<code>"ionization"</code>。
	</li></ul><a name="help_script_Modules_Regex.substring_reference"> </a><ul>
	<li><code>\k</code>不支持八进制转义字符，使用十六进制转义字符替代。
	</li></ul><a name="help_script_Modules_Regex.greedy_match"> </a><ul>
	<li>贪婪匹配和非贪婪匹配策略
		<ul>
			<li>正则表达式默认使用贪婪匹配策略，即使用<code>+</code>、<code>\*</code>以及一个<code>?</code>时，尽可能匹配多的字符（并且消耗掉），也可以理解为左侧匹配（消耗）字符后直到不匹配的位置交给右侧的规则。
			</li>
			<li>在匹配多字符匹配的元字符后加上一个问号<code>?</code>实际上会使得问号左侧的匹配规则能够满足最基本的匹配要求的前提下优先考虑问号右侧的匹配规则。
			</li>
		</ul>
	</li></ul><a name="help_script_Modules_Regex.reverse_reference"> </a><ul>
	<li>使用<code>\k</code>（k是正整数编号）反向引用子串匹配结果
		<ul>
			<li>用来指定当前的位置采用和指定位置子串的匹配结果一致的内容
			</li>
			<li>并不是模式重复，而是模式匹配的结果重复
			</li>
		</ul>
	</li></ul><a name="help_script_Modules_Regex.usage"> </a><h2>正则表达式库的用法</h2><ul>
	<li>EWSL的regex库提供了几个标准函数（
		<a target="_top" href="#help_script_Specifications_Module_Regex">库函数具体用法
		</a>）：<br />

	</li></ul><p>
	<div class="markdown-block">
		<table width="100%">
			<tr style="border:0px">
				<td align="center" style="border:0px">
					<a name="table-regex-functions">table 2: EWSL-Regex库函数
					</a>
				</td>
			</tr>
			<tr style="border:0px">
				<td style="border:0px">
					<div class="markdown-table">
						<table width="100%" class="markdown-table" style="border:1px">
							<thead>
								<tr>
									<td align="center"> 函数名<br />

									</td>
									<td align="center"> 用法<br />

									</td>
									<td align="center"> 说明<br />

									</td>
								</tr>
							</thead>
							<tbody>
								<tr>
									<td align="center"> <code>regex.create</code><br />

									</td>
									<td align="left"> <code>regex.create()</code>,<code>regex.create(re_str,flag=0)</code><br />

									</td>
									<td align="left"> 创建一个正则表达式，允许后续使用<code>prepare</code>预定义具名子串模式<br />

									</td>
								</tr>
								<tr>
									<td align="center"> <code>regex.compile</code><br />

									</td>
									<td align="left"> <code>regex.compile(re_str,flag=0)</code><br />

									</td>
									<td align="left"> 直接编译一个正则表达式<br />

									</td>
								</tr>
								<tr>
									<td align="center"> <code>regex.match</code><br />

									</td>
									<td align="left"> <code>regex.match(re_str,str,flag=0)</code><br />

									</td>
									<td align="left"> 直接使用一个正则表达式进行匹配，返回
										<a target="_top" href="#help_script_Modules_Regex.match_object">匹配对象
										</a><br />

									</td>
								</tr>
								<tr>
									<td align="center"> <code>regex.search</code><br />

									</td>
									<td align="left"> <code>regex.search(re_str,str,flag=0)</code><br />

									</td>
									<td align="left"> 直接使用一个正则表达式进行搜索，返回
										<a target="_top" href="#help_script_Modules_Regex.match_object">匹配对象
										</a><br />

									</td>
								</tr>
								<tr>
									<td align="center"> <code>regex.replace</code><br />

									</td>
									<td align="left"> <code>regex.replace(re_str1,re_str2,str,count=0,flag=0)</code><br />

									</td>
									<td align="left"> 直接使用正则表达式进行搜索替换<br />

									</td>
								</tr>
							</tbody>
						</table>
					</div>
				</td>
			</tr>
		</table>
	</div></p><p>
	<ul>
		<li>正则表达式对象接口：
		</li>
	</ul>
	<div class="markdown-block">
		<table width="100%">
			<tr style="border:0px">
				<td align="center" style="border:0px">
					<a name="EWSL-Regex-Object-Interfaces">table 3: EWSL-Regex 对象接口
					</a>
				</td>
			</tr>
			<tr style="border:0px">
				<td style="border:0px">
					<div class="markdown-table">
						<table width="100%" class="markdown-table" style="border:1px">
							<thead>
								<tr>
									<td rowspan="1" colspan="2" align="left"> <code>reobj</code>表示一个由regex.compile产生的正则表达式对象<br />

									</td>
								</tr>
							</thead>
							<tbody>
								<tr>
									<td align="center"> 函数名<br />

									</td>
									<td align="center"> 用法<br />

									</td>
									<td align="center"> 说明<br />

									</td>
								</tr>
								<tr>
									<td align="center"> <code>reobj.prepare</code><br />

									</td>
									<td align="left"> <code>reobj.prepare(name, patter)</code><br />

									</td>
									<td align="left"> 预处理：增加预定义子串匹配模式<br />

									</td>
								</tr>
								<tr>
									<td align="center"> <code>reobj.compile</code><br />

									</td>
									<td align="left"> <code>reobj.compile(flag=0)</code><br />

									</td>
									<td align="left"> 自编译<br />

									</td>
								</tr>
								<tr>
									<td align="center"> <code>reobj.match</code><br />

									</td>
									<td align="left"> <code>reobj.match(target_str)</code><br />

									</td>
									<td align="left"> 返回整体匹配结果的匹配对象<br />

									</td>
								</tr>
								<tr>
									<td align="center"> <code>reobj.search</code><br />

									</td>
									<td align="left"> <code>reobj.search(target_str)</code><br />

									</td>
									<td align="left"> 返回用于递进搜索的匹配对象<br />

									</td>
								</tr>
								<tr>
									<td align="center"> <code>reobj.replace</code><br />

									</td>
									<td align="left"> <code>reobj.replace(target_str, pattern, count=0)</code><br />

									</td>
									<td align="left"> 替换<br />

									</td>
								</tr>
							</tbody>
						</table>
					</div>
				</td>
			</tr>
		</table>
	</div></p><p>
	<a name="help_script_Modules_Regex.named_substring_reference"> 
	</a>
	<ul>
		<li><code>reobj.match</code>和<code>reobj.search</code>函数返回的是
			<a target="_top" href="#help_script_Modules_Regex.match_object">匹配对象
			</a>。
		</li>
		<li>对于较为复杂的正则表达式，可以利用<code>reobj.prepare</code>将一些复杂的子串匹配模式用名字定义起来，然后再行引用。EWSL的具名子串支持递归引用。典型的预定义字符串例如：
		</li>
	</ul>
	<div class="markdown-block">
		<table width="100%">
			<tr style="border:0px">
				<td align="center" style="border:0px">
					<a name="EWSL-Regex-Predefined-Example">table 4: EWSL-Regex 预定义子串的例子
					</a>
				</td>
			</tr>
			<tr style="border:0px">
				<td style="border:0px">
					<div class="markdown-table">
						<table width="100%" class="markdown-table" style="border:1px">
							<thead>
								<tr>
									<td align="center"> 名称<br />

									</td>
									<td align="center"> 正则表达式（未转义）<br />

									</td>
									<td align="center"> 说明<br />

									</td>
								</tr>
							</thead>
							<tbody>
								<tr>
									<td align="center"> <code>id</code><br />

									</td>
									<td align="center"> <code>(\w([\w\d_]*))</code><br />

									</td>
									<td align="left"> 变量名：采用英文字母（或Unicode符号）开头的，后续允许英文字母（或Unicode符号）、数字和下划线组成的连续子串<br />

									</td>
								</tr>
								<tr>
									<td align="center"> <code>int</code><br />

									</td>
									<td align="center"> <code>([\\+\\-]0|[1-9][0-9]*)</code><br />

									</td>
									<td align="left"> 整数：符号开头，接一个<code>1-9</code>的数字，后面跟着不定数量的<code>0-9</code>数字<br />

									</td>
								</tr>
							</tbody>
						</table>
					</div>
				</td>
			</tr>
		</table>
	</div></p><a name="help_script_Modules_Regex.match_object"> </a><h3>匹配对象</h3><a name="help_script_Modules_Regex.substring_reference"> </a>匹配对象是一种引用匹配结果的方式，使用面向对象封装。对于使用<code>match</code>函数返回的匹配对象，使用子串引用方式来处理结果。见<a target="_top" href="#help_script_Modules_Regex.example_1">例子1</a>。<br />
<div class="markdown-block">
	<table width="100%">
		<tr style="border:0px">
			<td align="center" style="border:0px">
				<a name="Match-Object">table 5: Match Object接口
				</a>
			</td>
		</tr>
		<tr style="border:0px">
			<td style="border:0px">
				<div class="markdown-table">
					<table width="100%" class="markdown-table" style="border:1px">
						<thead>
							<tr>
								<td rowspan="1" colspan="2" align="left"> <code>mobj</code>是一个匹配对象<br />

								</td>
							</tr>
						</thead>
						<tbody>
							<tr>
								<td align="center"> 函数名<br />

								</td>
								<td align="center"> 说明<br />

								</td>
							</tr>
							<tr>
								<td align="center"> <code>mobj.sub()</code><br />

								</td>
								<td align="left"> 索引匹配的子串，<code>mobj.sub(k,m)</code><br />

								</td>
							</tr>
							<tr>
								<td align="center"> <code>mobj.next()</code><br />

								</td>
								<td align="left"> 移动到下一个匹配位置，配合<code>search</code>和<code>replace</code>使用。<br />

								</td>
							</tr>
							<tr>
								<td align="center"> <code>mobj.start</code><br />

								</td>
								<td align="left"> 起始位置<br />

								</td>
							</tr>
							<tr>
								<td align="center"> <code>mobj.end</code><br />

								</td>
								<td align="left"> 终止位置<br />

								</td>
							</tr>
							<tr>
								<td align="center"> <code>mobj.result</code><br />

								</td>
								<td align="left"> 匹配的结果<br />

								</td>
							</tr>
							<tr>
								<td align="center"> <code>mobj.regex</code><br />

								</td>
								<td align="left"> 原始的正则表达式字符串<br />

								</td>
							</tr>
						</tbody>
					</table>
				</div>
			</td>
		</tr>
	</table></div><p>
	<ul>
		<li><code>mobj.sub</code>函数返回子串匹配的情况。
			<ul>
				<li><code>mobj.sub()</code>返回最外层的所有子串组成的数组。
				</li>
				<li><code>mobj.sub(n)</code>返回最外层第<code>n</code>个括号中的所有匹配子串组成的数组。
				</li>
				<li><code>mobj.sub(n,m)</code>返回最外层<code>n</code>个括号中第<code>m</code>个括号中的所有匹配子串组成的数组。
				</li>
				<li><code>mobj.sub(n,m,p)</code>返回最外层第<code>n</code>个括号中第<code>m</code>个括号中第<code>p</code>个括号中所有匹配子串组成的数组。
				</li>
				<li>上述规则可以依次类推。
				</li>
				<li>最后一层括号由于内部没有更多子串，返回的是空数组，而不会报错。
				</li>
				<li>最后一层括号中增加括号深度时，会报错。
				</li>
				<li><code>(...)*</code>这种情况时可能匹配结果为空数组。
				</li>
				<li><code>(...)* (...)+ (...)?</code>的情况返回的匹配数量是不确定的，并且结果会堆叠在同一层级上，如果要将这种重复模式分级，额外再套一层括号如（<code>((...)*)</code>）。
				</li>
				<li><code>(...)\1</code>这种用法将返回一个匹配，如果要将反向引用<code>\1</code>加入到引用列表中，额外加上括号（<code>(...)(\1)</code>）。
				</li>
			</ul>
		</li>
		<li><code>mobj.next</code>将<code>mobj</code>移动到下一个匹配点，这时候<code>mobj.start</code>和<code>mobj.end</code>这两个数值会随之更新到下一个匹配位置，如果原始字符串是<code>str</code>，那么<code>str[mobj.start:mobj.end]</code>可以得到匹配的子串内容。
		</li>
	</ul></p><a name="help_script_Modules_Regex.examples"> </a><h2>例子</h2><p>
	<a name="help_script_Modules_Regex.example_1"> 
	</a>
	<ul>
		<li>简单分词
		</li>
	</ul><blockquote>将如右侧类似的句子<code>"This is John's family."</code>分词。（要求去除空格和单引号的子串引用）</blockquote></p><pre><code code-language="ewsl">str = "This is John's family.";<br />re = regex.compile("((\\w+)(?:[\s.,']*))+");<br />obj = re.match(str);<br /><br />obj.sub()       // =&gt; array(1x5):["This ", "is ", "John'", "s ", "family."]<br />obj.sub(0)      // =&gt; array(1):  ["This"]<br />obj.sub(1)      // =&gt; array(1):  ["is"]<br />obj.sub(2)      // =&gt; array(1):  ["John"]<br />obj.sub(3)      // =&gt; array(1):  ["s"]<br />obj.sub(4)      // =&gt; array(1):  ["family"]</code></pre><p>
	<a name="help_script_Modules_Regex.example_2"> 
	</a>
	<ul>
		<li>电话号码分析
			<ul>
				<li>电话号码为三位或者四位数字开头（区号）加一个连接符<code>-</code>，然后再跟着8位数字
				</li>
				<li>电话号码之间有不确定的空白字符连接
				</li>
			</ul>
		</li>
	</ul></p><pre><code code-language="ewsl">str = "010-12342222 021-34432223 025-34334223 0519-22234444";<br />re = regex.create("([0-9]{3,4}-[0-9]{8}\s*)+");<br />obj = re.match(str);<br />obj.sub()       // =&gt; array(1x4): [ "010-12342222 ", "021-34432223 ", "025-34334223 ", "0519-22234444" ]</code></pre><a name="help_script_Modules_Regex.reference"> </a><h2>参考</h2><a target="_top" href="#help_script_Specifications_Module_Regex">正则表达式函数表</a></div>