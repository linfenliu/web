<div class="markdown-body"><h1>正则表达式库函数</h1><p>正则表达式介绍请阅读
	<a target="_top" href="#help_script_Modules_Regex">正则表达式库
	</a>。<br />
</p><a name="help_script_Specifications_Module_Regex.library_functions"> </a><h2>库函数</h2><a name="help_script_Specifications_Module_Regex.function.compile"> </a><code>regex.compile</code>  <p>将正则表达式编译成一个正则表达式对象</p><br /><strong>语法：</strong>  <pre><code code-language="ewsl">regex.compile(re_str)           // Compile a regular expression object.<br />regex.compile(re_str, flag)     // Compile a regular expression object with user's flag.</code></pre><a name="help_script_Specifications_Module_Regex.function.create"> </a><code>regex.create</code>  创建一个正则表达式对象，允许用户加载预定义子串。<br /><strong>语法：</strong>  <pre><code code-language="ewsl">regex.create()                  // Create a regular expression object.<br />regex.create(re_str)            // Create a regular expression object defined by a string.</code></pre><a name="help_script_Specifications_Module_Regex.function.match"> </a><code>regex.match</code>  使用正则表达式进行字符串匹配<br /><strong>语法：</strong>  <pre><code code-language="ewsl">regex.match(re_str, str)                        // Return a match-object if it matches, or it returns nil value.<br />regex.match(re_str, str, flag)                  // Like above and it does with user's flag.</code></pre><a name="help_script_Specifications_Module_Regex.function.search"> </a><code>regex.search</code>  使用正则表达式进行匹配搜索<br /><strong>语法：</strong>  <pre><code code-language="ewsl">regex.search(re_str, str)                       // Return a match-object if it matches, or it returns nil value.<br />regex.search(re_str, str, flag)                 // Like above and it does with user's flag.</code></pre><a name="help_script_Specifications_Module_Regex.function.replace"> </a><code>regex.replace</code>  使用正则表达式进行替换<br /><strong>语法：</strong>  <pre><code code-language="ewsl">regex.replace(re_str1, re_str2, str)                    // Replace pattern re_str1 by re_str2 in str.<br />regex.replace(re_str1, re_str2, str, count, flag)       // Replace pattern re_str1 by re_str2 in str with options flag and count restriction (default 0 means no-restriction).</code></pre><a name="help_script_Specifications_Module_Regex.regex_object"> </a><h2>正则表达式对象成员</h2><p>使用<code>regex.create</code>函数和<code>regex.compile</code>函数创建的正则表达式对象<code>regex_object</code>可以使用一系列成员函数。正则表达式匹配行为在<code>regex_object.compile</code>函数运行时确定，匹配、搜索和替换过程不再接受传入的标志参数。<br />
</p><a name="help_script_Specifications_Module_Regex.function.regex_object.prepare"> </a><code>regex_object.prepare</code>  加载具名预定义子串模式<br /><strong>语法：</strong>  <pre><code code-language="ewsl">regex_object.prepare(re_name, re_str)</code></pre><a name="help_script_Specifications_Module_Regex.function.regex_object.compile"> </a><code>regex_object.compile</code>  自编译<br />
<br /><strong>语法：</strong>  <pre><code code-language="ewsl">regex_object.compile()<br />regex_object.compile(flag)</code></pre><a name="help_script_Specifications_Module_Regex.function.regex_object.match"> </a><code>regex_object.match</code>  匹配字符串<br />
<br /><strong>语法：</strong>  <pre><code code-language="ewsl">regex_object.match(str)                 // If it matches, it returns a match-object. If it does not match, it returns a nil value.</code></pre><a name="help_script_Specifications_Module_Regex.function.regex_object.search"> </a><code>regex_object.search</code>  搜索<br /><strong>语法：</strong>  <pre><code code-language="ewsl">regex_object.search(str)                // If it matches at a position, it returns a match-object. If it does not match, it returns a nil value.</code></pre><a name="help_script_Specifications_Module_Regex.function_regex_object.replace"> </a><code>regex_object.replace</code>  替换<br />
<br /><strong>语法：</strong>  <pre><code code-language="ewsl">result, real_count = regex_object.replace(str, pattern)          // Search the target string 'str' from the leftmost and if it matches the regular expression it will be replaced by the pattern 'pattern'<br />result, real_count = regex_object.replace(str, pattern, count)   // Search the target string 'str' from the leftmost and if it matches the regular expression it will be replaced by the pattern 'pattern' with count restriction (0 means no restriction as default)<br />result, real_count = regex_object.replace(str, callback, count=0) // Search the target string 'str' from the leftmost and if it matches the regular expression call `callback(match_object)` and take the result as replacement. Count restriction is also be taked if count &gt; 0.</code></pre><a name="help_script_Specifications_Module_Regex.match_object"> </a><h2>匹配对象成员</h2><p>匹配、搜索函数返回一个匹配对象（
	<strong>Match Object
	</strong>），使用匹配对象可以进行子串匹配、迭代匹配等操作。<br />
</p><a name="help_script_Specifications_Module_Regex.function.match_object.next"> </a><code>match_object.next</code>  定位到下一个匹配位置<br />
<br /><strong>语法：</strong>  <pre><code code-language="ewsl">match_object.next()     // Go next position. If it goes next successly it returns true. If it goes the end it returns false. </code></pre><a name="help_script_Specifications_Module_Regex.function.match_object.sub"> </a><code>match_object.sub</code>  获得子串匹配的结果（返回匹配结果字符串的数组）<br />
<br /><strong>语法：</strong>  <pre><code code-language="ewsl">match_object.sub()          // Return all top-level indexed matched substrings.<br />match_object.sub(n1,...)    // Return custom-selected-level indexed matched substrings. (n1,...) indicates the indexed substring's (indexed bracket's) depth and position.</code></pre><a name="help_script_Specifications_Module_Regex.function.match_object.group"> </a><code>match_object.group</code>  获得所有匹配子串的信息（包括所有层次的被索引的匹配结果），以及根据该结果返回按照给定次序重组的结果<br /><strong>语法：</strong>  <pre><code code-language="ewsl">match_object.group()                // Return all matched sub-strings.<br />match_object.group(i1,i2,...)       // Regroup by [i1,i2,...] from the matched sub-strings.</code></pre><a name="help_script_Specifications_Module_Regex.function.match_object.replace"> </a><code>match_object.replace</code><br /><strong>语法：</strong>  <pre><code code-language="ewsl">match_object.replace(pattern)  // Replace the matched result by pattern and return the substituted result.</code></pre></div>