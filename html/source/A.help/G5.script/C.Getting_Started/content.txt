# 入门

## 第一个程序

和大多数程序设计语言一样，我们还是先给出一个输出`Hello World!`的小程序。我们可以打开交互式运行环境，在命令行提示符`>>`后输入下面的命令：
```mx
>> print("Hello World!")
Hello World!

```

## 使用帮助
使用`help`函数可以调取有关对象的帮助信息，例如：
```mx
>> help(sin)
math.sin:
计算数组或数值的正弦值

alias:
sin

usage:
sin(1.3);
sin((0:10:180)*3.1415/180);

example:
PI=3.14159265;
param = 30.0;
result = sin (param*PI/180);
println(result);
```

## 算术表达式
MX支持常见的算术表达式用来快速计算一些式子，例如我们要计算$\dfrac{1 + \sqrt{5}}{2}$的数值，可以在交互式运行环境中输入：
```mx
>> (1 + sqrt(5))/2
result: 1.61803
```

**注意：**
* 在算术表达式中，采取常规的中缀模式（即二元运算符处于操作数的中间）。
* 括号的优先级最高。
* 支持常见的加减乘除运算(`+,-,*,/`)、乘方运算（`^`）。
* 在`math`模块下有一些常用的数学函数。


## 字符串的打印和连接
MX可以用三种方式定义字符串：
* 双引号括起来
* 单引号括起来
* 三个单引号括起来的多行字符串

例如：
```mx
a = "abc";
b = '"abc"';
c = '''
John:  What can I do for you?
Marry: I need some cofee. Thank you very much.
John:  That' all right.
```

**注意：**
* 使用单双引号时，注意使用转义字符`\`对有关字符进行转义。
* 使用单引号可以不必对双引号进行转义，使用双引号可以不必对单引号进行转义。
* 使用三个单引号的多行字符串，可以不使用转义字符串，但是中间不可以再出现连续的三个单引号。

下面是转义字符表：
|  转义字符 |  含义     |
|  \t       |  制表位   |
|  \b       |  退格     |
|  \s       |  空格     |
|  \r       |  回车     |
|  \n       |  换行     |
|  \\\\     |  字符\\   |
|  \\"      |  双引号"  |
|  \\'      |  单引号'  |


## 注释
MX使用C++风格的注释，分别支持单行注释符(`//`)和多行注释符(`/* ... */`)两种模式。

例子：
```mx
println("Hello"); // 这是单行注释
/* 这是多行注释
 * 1. 定义一个二元函数f，返回两个参数的和
 * 2. 定义一个一元函数g，输入参数为z，返回一个一元函数，参数为x，其行为是返回x+z的值
 */
f = function(x,y) { return x + y; }
g = function(z) { return function(x) { return x + z; }; }
```

## 使用函数
我们可以定义一个函数，将输入的参数加1并且返回：
```mx
function my_func(x)
{
    return x + 1;
}
```

MX中的函数如同普通值（如整数、浮点数等）一样是一等公民，可以赋值给任何一个变量符号。例如：
```mx
>> f = my_func;
>> g = my_func;
>> f(10)
11
>> g(20)
21
```
## 使用数组
MX可以定义一个数组，数组可以进行简单的四则运算：
```mx
>> xs = [1,2,3,4];
>> ys = [3,4,5,6];
>> zs = xs + ys
[4,6,8,10]
>> ws = ys - xs
[2,2,2,2]
```
**注意：**使用`;`可以告诉交互式编程环境不输出当前表达式的值，如果不写`;`，那么会打印当前表达式的值。


## 使用变量表
MX可以定义变量表，用来保存复杂的数据：
```mx
>> student = table { name : "Jack"; gender : "male"; age : 18 };
>> print(student.name)
Jack
>> print(student.gender)
male
>> print(student.age)
18
```

## 保存和载入数据
MX可以将变量内容保存成外部文件，或者从外部文件中读入数据：
```mx
>> xs = [1,2,3,4];
>> io.save_var("D:\\Temp\\xs.ewd", xs);
>> ys = io.load_var("D:\\Temp\\xs.ewd")
[1,2,3,4]
```

**注意：**如果要保存多个数据可以先将数据装入一个变量表或者数组，然后再保存出去。

MX可以支持普通数组导出为文本格式，或者从文本格式中读入一个数组，使用`io.save_txt`和`io.load_txt`函数：
```mx
>> xs = [1,2,3,4];
>> io.save_txt("D:\\Temp\\xs.txt", xs);
>> ys = io.load_txt("D:\\Temp\\ys.txt", ys);
```

**注意：**二维以下数值可以用文本格式直接表示，对于维度更高的情况建议使用`io.save_var`和`io.load_var`来实现。


## 数据的绘图
MX支持绘图功能。例如创建简单的曲线图：
```mx
>> xs = linspace(0, pi * 2, 361);
>> ys1 = cos(xs);
>> ys2 = sin(xs);
>> myfig = fig.new_figure();
>> fig.plot(xs,ys1);
>> fig.plot(xs.ys2);
```
打开`myfig`节点可以查看：

[image]("image/mx/tutorial/figure_example_1.png",绘图例子1)



