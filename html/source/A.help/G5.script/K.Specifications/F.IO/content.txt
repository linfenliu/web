# IO函数


```block:syntax
  
**语法：**  
```

```block:example
  
**例子：**  
```

```block:reference
  
**参考：**  
```


IO函数为用户提供了操作控制台输入输出、文件读写和数据文件的读写等接口。  


## 标准输入与输出

`io.stdin`  
标准输入流

`io.stdout`  
标准输出流

`io.stderr`  
标准错误流

## 文件的读写

`io.open`  
打开一个文件或支持流的设备，返回一个IO流  

[block-ref]("syntax")
```ewsl
stream = io.open(filename, MODE)   // MODE = io.ReadMode | io.WriteMode | io.ReadWriteMode | io.AppendMode
```

[anchor](".IOMode")
* IO模式
||(IO模式,table_IOMode,cl)
| 模式符号              |(c) 说明      |
| `io.ReadMode`         | 只读模式  |
| `io.WriteMode`        | 只写模式  |
| `io.ReadWriteMode`    | 读写模式  |
| `io.AppendMode`       | 追加模式  |


`io.close`  
关闭一个流  

`io.read`  
从一个流中读取数据，具体参数决定返回值的类型

`io.readln`
从一个流中读取一行或多行，返回这一行的字符串，如果是多行，返回由每一行字符串组成的数组（可以选择去掉或保留换行符）


`io.write`
向一个流中写入数据，参数决定写入的方式


`io.writeln`
向一个流中写入一行或者多行的内容，自动在每一行内容结束后加入一个换行符


`io.is_eof`
判断一个流是否处于结束位置  


`io.seek`
设定流的位置

[anchor](".SeekMode")
* 定位方式
||(定位模式,table_SeekMode,cl)
| 模式符号              |(c) 说明                           |
| `io.AbsoluteSeek`     | 绝对定位（从开头计算）            |
| `io.RelativeSeek`     | 相对定位（从当前位置计算）        |
| `io.SeekFromEnd`      | 从流的尾部定位                    |

## 数据文件的读写


`io.load`  
载入数据文件

[block-ref]("syntax")
```ewsl
data = io.load(filename, OPTIONS, arg1, ... )
var  = io.load(filename, PARSER, arg1, ... )
```

**说明：**
* 第一个参数是文件名
* 第二个参数是选项或者内容解析器，该参数可以是用户定义的一个解析器函数
  * 解析器函数将一个文件流或者字符串转换为一个数据变量，即可以`my_parser(stream, arg1, ...)`，也可以`my_parser(string_content, arg1, ...)`
  * 可以利用[link]("?help_script_Programming_I.regex",正则表达式)匹配方式来获得一个数据结构
* 第三个参数为附加参数
  * 当第二个参数是选项时，附加参数有不同的含义
  * 当第二个参数是解析器时，这些附加参数作为解析器的传入参数
* 参看[link]("?.table_Mode_and_Parser",读写模式选项和解析器)

`io.save`  
写入数据文件  




* 数据读写模式常量和解析器
||(读写模式选项和解析器,table_Mode_and_Parser,cl)
| 模式符号          |(c) 说明                                                   |
| "-auto"           | 自动判断，默认值                                          |
| "-mat"            | 载入一个数组，自动识别是文本或二进制                      |
| "-text"           | 载入的数据作为一个字符串，自动判断编码格式，建议UTF8或本地编码格式                |
| "-text:codepage"  | 载入的数据作为一个字符串，根据用户选择`codepage`确定编码格式                      |
| "-var"            | 载入一个EWSL的变量数据，二进制格式                        |
| "-fig", "-figure" | 载入一个EWSL的数据图，二进制格式                          |
| "-json"           | 载入一个JSON数据表，返回一个变量表                        |
| "-xml"            | 载入一个XML数据表，返回一个变量表                         |
| "-csv"            | 载入一个CSV数据表，返回一个二维数组                       |
| "-image"          | 载入位图数据（png/bmp/jpg/gif等），返回一个整数二维数组   |
| "-png"            | 指定png格式数据，返回同上                                 |
| "-bmp"            | 指定bmp格式数据，返回同上                                 |
| "-jpg", "-jpeg"   | 指定jpeg格式数据，返回同上                                |
|(1,2) 解析器                                                                   |
| `io.json_parser`  | Json解析器                                                |
| `io.xml_parser`   | XML解析器                                                 |
| `io.array_parser` | 文本数组解析器                                            |
| `io.csv_parser`   | CSV数据解析器                                             |





## 交互处理

`io.interact_line`

输入一个行处理器（line_handler），产生一个和输入流的交互行为  

[block-ref]("syntax")
```ewsl
io.interactive_line(line_handler = print, stream = stdin, cr = "\r\n")
```

**说明：**
* `line_handler`默认是打印函数，即输入一行后自动打印该行内容
* 读入每一行时保留行末的换行符，交给`line_handler`，即允许在`line_handler`中分析具体的行末符
* `stream`默认为标准输入流
* `cr`为指定换行符，默认是`"\r\n"`


